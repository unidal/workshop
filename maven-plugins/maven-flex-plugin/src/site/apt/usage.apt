 ------
 Introduction
 ------
 Frankie Wu
 ------
 21 Nov 2007
 ------
 
Maven Flex Plugin: Usage

* {The flex:initialize Goal}

  Maven has {{{http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html}Standard Directory Layout}} for java project.
  For example, all of java sources are located at $\{basedir\}/src/main/java and classes in $\{basedir\}/classes. 
  However, for Flex development, it's better to define its own directory layout. That's what the <initialize> goal does.

  Actually, what the <initialize> does is equivalent with following setting in the <build> section of pom file.

+----+
<project>
  ...
  <build>
    <sourceDirectory><${basedir}/src/main/flex></sourceDirectory>
    <testSourceDirectory><${basedir}/src/test/flex></testSourceDirectory>
    <outputDirectory><${basedir}/target/flex></outputDirectory>
    <testOutputDirectory><${basedir}/target/test-flex></testOutputDirectory>
    ...
  </build>
  ...
</project>
+----+

  You can override one or more of them.
  
+----+
<project>
  ...
  <build>
    <sourceDirectory>.</sourceDirectory>
    ...
  </build>
  ...
</project>
+----+


* {The flex:compile Goal}

** {General}

  The <compile> goal is used to generate Adobe Flash files (*.swf and *.swc) from Flex source files (*.mxml, *.as and *.css etc). 
  It achives the goal by preparing the Flex compiler arguments and passing them to the underlying Flex compiler (mxmlc, compc or asdoc).
  
  Also, for swf build, it can resolve its dependencies automatically to figure out all of the libraries to be included while building.
  
  First of all, the project packaging should be set to <swf> or <swc>.
  
+----+
<project>
   <modelVersion>4.0.0</modelVersion>
   <artifactId>eGrid</artifactId>
   <name>eGrid</name>
   <description>Flex for eGrid</description>
   <packaging>swf</packaging>  <!-- only support swf or swc -->
   ...
</project>

+----+
  
  Here is a simple sample:
  
+----+  
<plugin>
   <groupId>com.site.maven.plugins</groupId>
   <artifactId>maven-flex-plugin</artifactId>
   <extensions>true</extensions>
   <configuration>
      <args>${args.automation}</args>
   </configuration>
   <executions>
      <execution>
         <id>build ${project.name} on Flex SDK 2</id>
         <phase>generate-resources</phase>
         <configuration>
            <flexHome>${flex.sdk2.home}</flexHome>
            <parameters>
               <headless-server />
               <benchmark />
            </parameters>
         </configuration>
         <goals>
            <goal>compile</goal>
         </goals>
      </execution>
   </executions>
</plugin>
+----+  

  Either property $\{flex.home\} or element \<flexHome\> needs to be specified to indicate where Flex SDK installed.
  
** {Parameter Mapping Rules}

  For each element of \<parameters\>, it maps to a Flex compiler option. Here are the mapping rules:
  
  * {no value option}

	Using the option name as parameter tag name.
	For example, "-benchmark" will be mapped to "\<benchmark/\>", "-headless-server" to "\<headless-server/\>", "-compiler.debug" to "\<compiler.debug/\>", "-optimize" to "\<optimize/\>", and so on.
  
  * {single value option}

	Using the option name as parameter tag name, and option value as its tag value.
	For example, "-locale en_US" will be mapped to "\<locale\>en_US\</locale\>", "-load-config" to "\<load-config\>my-config.xml\</load-config\>", "-load-config" to "\<dump-config\>my-config.xml\</dump-config\>", and so on.

  * {repeatable option}
  
    Using the option name as the parameter tag name, and each of option value as second level tag value.

+----+
-include-classes [class] [...]

  should be mapped to

<parameters>
   ...
   <include-classes>
      <class>com.site.A</class>
      <class>com.site.B</class>
      ...
   </include-classes>
   ...
</parameters>
+----+

  []
  
  Please refer to {{{options.html}Flex Compiler Command-Line Options}} for more information.


* {The flex:runtime Goal}

  This goal can be used in a web application project, three tasks would be done in this goal:
  
  * Unzip Flex Runtime (required)
  
  * Copy all of resources if availabe (optional)
  
  * Copy all dependent swf files and generate HTML files from the template file for each dependency.
  
  []
  
  The destination directory can be set by \<warSourceDirectory\>.
  
  Ideally, all dependencies should be defined at the pom level, however, there is a bug with maven-eclipse-plugin, which will cause web application deployment failure because .swf file can't be recognized by the web container. So in this case, all swf dependencies are configured inside the \<configuration\> section.
  
  Here is an example:
  
+----+
<plugin>
   <groupId>com.site.maven.plugins</groupId>
   <artifactId>maven-flex-plugin</artifactId>
   <executions>
      <execution>
         <phase>generate-resources</phase>
         <configuration>
            <warSourceDirectory>WebContent</warSourceDirectory>
            <flexRuntime>${basedir}/flexruntime.zip</flexRuntime>
            <resources>
               <resource dir="${basedir}">com/site/images</resource>
            </resources>
            <dependencies>
               <dependency>
                  <groupId>com.site.kernel.sc.flex</groupId>
                  <artifactId>Voyager2</artifactId>
                  <version>${project.version}</version>
                  <type>swf</type>
               </dependency>
               <dependency>
                  <groupId>com.site.kernel.sc.flex</groupId>
                  <artifactId>WebConfig</artifactId>
                  <version>${project.version}</version>
                  <type>swf</type>
               </dependency>
               <dependency>
                  <groupId>com.site.kernel.sc.flex</groupId>
                  <artifactId>Reimage</artifactId>
                  <version>${project.version}</version>
                  <type>swf</type>
               </dependency>
               <dependency>
                  <groupId>com.site.kernel.sc.flex</groupId>
                  <artifactId>eGrid</artifactId>
                  <version>${project.version}</version>
                  <type>swf</type>
               </dependency>
            </dependencies>
         </configuration>
         <goals>
            <goal>runtime</goal>
         </goals>
      </execution>
   </executions>
</plugin>
+----+
